name: Build and Publish Python Package
on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      python-version:
        required: true
        type: string
      tag-regex:
        required: true
        type: string
      stable-version:
        required: false
        type: boolean
        default: false
      env-name:
        required: false
        type: string
        default: Development
      pypi-url:
        required: true
        type: string
    secrets:
      token:
        required: true
      pypi_token:
        required: true

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write
    environment: ${{ inputs.env-name}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Provision Virtual Environment (including updated pip and dependencies)
        run: |
          python3 -m pip install devautotools
          python3 -m devautotools deploy_local_venv

      - name: Get Python Package Version
        id: get_package_version
        run: |
          echo "PACKAGE_VERSION=v"`./venv/bin/python3 -m ${{ inputs.package-name}} --version` >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Check if Tag is Valid
        id: check-tag
        run: |
          if [[ ! ${{ steps.get_package_version.outputs.PACKAGE_VERSION }} =~ ${{ inputs.tag-regex }} ]]; then
            echo "Version found: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }} is not a valid semver number for this environment"
            else 
            echo "Version found: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }} is a valid semver number for this environment"
            echo "VALID_VERSION=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Tag
        id: create-tag
        if: steps.check-tag.outputs.VALID_VERSION == true
        continue-on-error: true
        env:
          TAG: ${{ steps.get_package_version.outputs.PACKAGE_VERSION  }}
        run: |
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}

      - name: Get Release for Tag
        if: steps.check-tag.outputs.VALID_VERSION == true
        id: get_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        with:
          tag: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }}
          doNotFailIfNotFound: true

    outputs:
      valid_version: ${{ steps.check-tag.outputs.VALID_VERSION }}
      tag: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }}
      release_found: ${{ steps.get_release.outputs.id }}

  build:
    needs: create-tag
    if: needs.create-tag.outputs.release_found == null && needs.create-tag.outputs.valid_version == 'true'
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-name}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Provision Virtual Environment (including updated pip and dependencies)
        run: |
          python3 -m pip install devautotools
          python3 -m devautotools deploy_local_venv

      - name: Install Build Module
        run: |
          ./venv/bin/pip install --upgrade build

      - name: Build Package
        run: |
          ./venv/bin/python3 -m build --no-isolation

      - name: Create Github Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          files: dist/*
          prerelease: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ inputs.pypi-url }}
          password: ${{ secrets.pypi_token }}