# Workflow to validate python packages

name: Validate Python Package
on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      python-version:
        required: false
        type: string
        default: 3.12
    secrets:
      github-token:
        required: true

env:
  ALL_VALID_TAGS_REGEX: ^v[0-9]+\.[0-9]+\.[0-9]+(\.(dev|post)[0-9]+)?$
  STATUS_CHECK_NAME: Valid Python package

jobs:
  python-package-get-version:
    uses: irvingleonard/reusable-workflows/.github/workflows/python-package-get-version.yml@v1
    with:
      package-name: ${{ inputs.package-name }}
      python-version: ${{ inputs.python-version }}

  validate-version:
    runs-on: ubuntu-latest
    needs: python-package-get-version
    permissions:
      actions: write
      contents: write
      id-token: write
      statuses: write
    steps:
      - name: Check if Version is Valid
        id: check_version
        run: |
          if [[ ! ${{ needs.python-package-get-version.outputs.package_version }} =~ ${{ env.ALL_VALID_TAGS_REGEX }} ]]; then
            echo "INVALID_TAG=True" >> $GITHUB_OUTPUT
            echo "Version found: ${{ needs.python-package-get-version.outputs.package_version }} is not a valid semantic version number";
          else 
            echo "Version found: ${{ needs.python-package-get-version.outputs.package_version }} is a valid semantic version number"
          fi

      - name: Set Failure Status for Invalid Version
        if: steps.check_version.outputs.INVALID_TAG != null
        uses: irvingleonard/github-actions-set-commit-status@master
        with:
          token: ${{ secrets.github-token }}
          status: "failure"
          context: ${{ env.STATUS_CHECK_NAME}}
          description: "Invalid Version: ${{ needs.python-package-get-version.outputs.package_version }}"

      - name: Exit if Version is Invalid
        if: steps.check_version.outputs.INVALID_TAG != null
        run: exit 1

      - name: Get Release for Version (Tag)
        if: needs.python-package-get-version.outputs.package_version
        id: get_release
        uses: irvingleonard/github-action-git-get-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          tag: ${{ needs.python-package-get-version.outputs.package_version }}
          doNotFailIfNotFound: true

      - name: Set Failure Status for Release Already Found
        if: steps.get_release.outputs.id != null
        uses: irvingleonard/github-actions-set-commit-status@master
        with:
          token: ${{ secrets.github-token }}
          status: "failure"
          context: ${{ env.STATUS_CHECK_NAME }}
          description: "Release already created for ${{ needs.python-package-get-version.outputs.package_version }}"

      - name: Exit if Release Already Found
        if: steps.get_release.outputs.id != null
        run: exit 1

  run-tests:
    runs-on: ubuntu-latest
    needs: validate-version
    permissions:
      actions: write
      contents: write
      id-token: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python ${{ inputs.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Devautotools
        run: |
          python3 -m venv venv_devautotools
          ./venv_devautotools/bin/pip install --upgrade pip
          ./venv_devautotools/bin/pip install --upgrade devautotools

      - name: Deploy Local Virtual Environment
        run: |
          ./venv_devautotools/bin/python -m devautotools deploy_local_venv

      - name: Install Test Coverage Python Modules
        run: |
          ./venv/bin/pip install --upgrade coverage

      - name: Run Tests
        id: tests
        run: ./venv/bin/coverage run -m unittest discover -v -s ${{ vars.TESTS_FOLDER || 'tests' }} && echo "TESTS_RESULT=passing" >> "$GITHUB_OUTPUT"
        continue-on-error: true

      - name: Set Failure Status for Tests
        if: steps.tests.outputs.TESTS_RESULT != 'passing'
        uses: irvingleonard/github-actions-set-commit-status@master
        with:
          token: ${{ secrets.github-token }}
          status: "failure"
          description: "Tests failing: ${{steps.tests.outputs.FAILED_TESTS}}"
          context: ${{ env.STATUS_CHECK_NAME }}

      - name: Exit if Tests Failed
        if: steps.tests.outputs.TESTS_RESULT != 'passing'
        run: exit 1

      - name: Create success status
        uses: irvingleonard/github-actions-set-commit-status@master
        with:
          token: ${{ secrets.github-token }}
          status: "success"
          context: ${{ env.STATUS_CHECK_NAME }}